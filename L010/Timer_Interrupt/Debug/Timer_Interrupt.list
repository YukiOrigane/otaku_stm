
Timer_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  08000444  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  08000444  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800044c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000450  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000450  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000124b  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005fd  00000000  00000000  000212ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000218b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000152  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e73c  00000000  00000000  00021bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002219  00000000  00000000  00030326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000594ab  00000000  00000000  0003253f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000054c  00000000  00000000  0008b9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0008bf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800042c 	.word	0x0800042c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800042c 	.word	0x0800042c

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	; 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	; (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
  }
}
 8000130:	46c0      	nop			; (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800013c:	b590      	push	{r4, r7, lr}
 800013e:	b083      	sub	sp, #12
 8000140:	af00      	add	r7, sp, #0
 8000142:	0002      	movs	r2, r0
 8000144:	6039      	str	r1, [r7, #0]
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800014a:	1dfb      	adds	r3, r7, #7
 800014c:	781b      	ldrb	r3, [r3, #0]
 800014e:	2b7f      	cmp	r3, #127	; 0x7f
 8000150:	d828      	bhi.n	80001a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000152:	4a2f      	ldr	r2, [pc, #188]	; (8000210 <__NVIC_SetPriority+0xd4>)
 8000154:	1dfb      	adds	r3, r7, #7
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	b25b      	sxtb	r3, r3
 800015a:	089b      	lsrs	r3, r3, #2
 800015c:	33c0      	adds	r3, #192	; 0xc0
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	589b      	ldr	r3, [r3, r2]
 8000162:	1dfa      	adds	r2, r7, #7
 8000164:	7812      	ldrb	r2, [r2, #0]
 8000166:	0011      	movs	r1, r2
 8000168:	2203      	movs	r2, #3
 800016a:	400a      	ands	r2, r1
 800016c:	00d2      	lsls	r2, r2, #3
 800016e:	21ff      	movs	r1, #255	; 0xff
 8000170:	4091      	lsls	r1, r2
 8000172:	000a      	movs	r2, r1
 8000174:	43d2      	mvns	r2, r2
 8000176:	401a      	ands	r2, r3
 8000178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	019b      	lsls	r3, r3, #6
 800017e:	22ff      	movs	r2, #255	; 0xff
 8000180:	401a      	ands	r2, r3
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	0018      	movs	r0, r3
 8000188:	2303      	movs	r3, #3
 800018a:	4003      	ands	r3, r0
 800018c:	00db      	lsls	r3, r3, #3
 800018e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000190:	481f      	ldr	r0, [pc, #124]	; (8000210 <__NVIC_SetPriority+0xd4>)
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b25b      	sxtb	r3, r3
 8000198:	089b      	lsrs	r3, r3, #2
 800019a:	430a      	orrs	r2, r1
 800019c:	33c0      	adds	r3, #192	; 0xc0
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80001a2:	e031      	b.n	8000208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a4:	4a1b      	ldr	r2, [pc, #108]	; (8000214 <__NVIC_SetPriority+0xd8>)
 80001a6:	1dfb      	adds	r3, r7, #7
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	0019      	movs	r1, r3
 80001ac:	230f      	movs	r3, #15
 80001ae:	400b      	ands	r3, r1
 80001b0:	3b08      	subs	r3, #8
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	3306      	adds	r3, #6
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	18d3      	adds	r3, r2, r3
 80001ba:	3304      	adds	r3, #4
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	1dfa      	adds	r2, r7, #7
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	0011      	movs	r1, r2
 80001c4:	2203      	movs	r2, #3
 80001c6:	400a      	ands	r2, r1
 80001c8:	00d2      	lsls	r2, r2, #3
 80001ca:	21ff      	movs	r1, #255	; 0xff
 80001cc:	4091      	lsls	r1, r2
 80001ce:	000a      	movs	r2, r1
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	401a      	ands	r2, r3
 80001d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	019b      	lsls	r3, r3, #6
 80001da:	22ff      	movs	r2, #255	; 0xff
 80001dc:	401a      	ands	r2, r3
 80001de:	1dfb      	adds	r3, r7, #7
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	0018      	movs	r0, r3
 80001e4:	2303      	movs	r3, #3
 80001e6:	4003      	ands	r3, r0
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <__NVIC_SetPriority+0xd8>)
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	001c      	movs	r4, r3
 80001f4:	230f      	movs	r3, #15
 80001f6:	4023      	ands	r3, r4
 80001f8:	3b08      	subs	r3, #8
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	3306      	adds	r3, #6
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	18c3      	adds	r3, r0, r3
 8000204:	3304      	adds	r3, #4
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	b003      	add	sp, #12
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <main>:
#include "stm32l0xx.h"

void TIM21_Configuration(void);

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// STM32L0xxのクロック設定（デフォルトのHSIクロックを使用）->MSI
	RCC->CR |= RCC_CR_HSION;	// HSI始動
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <main+0x54>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <main+0x54>)
 8000222:	2101      	movs	r1, #1
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR&RCC_CR_HSIRDY));	// クロック安定化を待機
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	4b10      	ldr	r3, [pc, #64]	; (800026c <main+0x54>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2204      	movs	r2, #4
 8000230:	4013      	ands	r3, r2
 8000232:	d0fa      	beq.n	800022a <main+0x12>
	RCC->CFGR |= RCC_CFGR_SW_HSI;	// HSIをクロック源として選択
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x54>)
 8000236:	68da      	ldr	r2, [r3, #12]
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <main+0x54>)
 800023a:	2101      	movs	r1, #1
 800023c:	430a      	orrs	r2, r1
 800023e:	60da      	str	r2, [r3, #12]

	// GPIOCクロックを有効化
	RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <main+0x54>)
 8000242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x54>)
 8000246:	2104      	movs	r1, #4
 8000248:	430a      	orrs	r2, r1
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c

	// PC15を出力に設定
	GPIOC->MODER &= ~GPIO_MODER_MODE15_Msk;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <main+0x58>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <main+0x58>)
 8000252:	0092      	lsls	r2, r2, #2
 8000254:	0892      	lsrs	r2, r2, #2
 8000256:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (GPIO_MODE_OUTPUT_PP << GPIO_MODER_MODE15_Pos);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <main+0x58>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <main+0x58>)
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	05c9      	lsls	r1, r1, #23
 8000262:	430a      	orrs	r2, r1
 8000264:	601a      	str	r2, [r3, #0]

    // TIM21の設定
    TIM21_Configuration();
 8000266:	f000 f805 	bl	8000274 <TIM21_Configuration>

    while (1)
 800026a:	e7fe      	b.n	800026a <main+0x52>
 800026c:	40021000 	.word	0x40021000
 8000270:	50000800 	.word	0x50000800

08000274 <TIM21_Configuration>:
        // メインの処理をここに追加
    }
}

void TIM21_Configuration(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    // TIM21のクロックを有効化
    RCC->APB2ENR |= RCC_APB2ENR_TIM21EN;
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <TIM21_Configuration+0x48>)
 800027a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <TIM21_Configuration+0x48>)
 800027e:	2104      	movs	r1, #4
 8000280:	430a      	orrs	r2, r1
 8000282:	635a      	str	r2, [r3, #52]	; 0x34

    // TIM21のプリスケーラを設定して1kHzのタイマークロックを得る
    TIM21->PSC = 15999;  // 16 MHzのクロックから1kHzに設定
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <TIM21_Configuration+0x4c>)
 8000286:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <TIM21_Configuration+0x50>)
 8000288:	629a      	str	r2, [r3, #40]	; 0x28

    // ARRレジスタを設定して1秒ごとに割り込みを発生させる
    TIM21->ARR = 999;  // 1秒（1000ミリ秒）ごとに割り込みを発生させる
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <TIM21_Configuration+0x4c>)
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <TIM21_Configuration+0x54>)
 800028e:	62da      	str	r2, [r3, #44]	; 0x2c

    // タイマ割り込みを有効化
    TIM21->DIER |= TIM_DIER_UIE;
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <TIM21_Configuration+0x4c>)
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <TIM21_Configuration+0x4c>)
 8000296:	2101      	movs	r1, #1
 8000298:	430a      	orrs	r2, r1
 800029a:	60da      	str	r2, [r3, #12]

    // TIM21のクロックを有効化
    TIM21->CR1 |= TIM_CR1_CEN;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <TIM21_Configuration+0x4c>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <TIM21_Configuration+0x4c>)
 80002a2:	2101      	movs	r1, #1
 80002a4:	430a      	orrs	r2, r1
 80002a6:	601a      	str	r2, [r3, #0]

    // 割り込み設定
    NVIC_EnableIRQ(TIM21_IRQn);
 80002a8:	2014      	movs	r0, #20
 80002aa:	f7ff ff2d 	bl	8000108 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM21_IRQn, 0);  // 割り込み優先度を設定
 80002ae:	2100      	movs	r1, #0
 80002b0:	2014      	movs	r0, #20
 80002b2:	f7ff ff43 	bl	800013c <__NVIC_SetPriority>
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40010800 	.word	0x40010800
 80002c4:	00003e7f 	.word	0x00003e7f
 80002c8:	000003e7 	.word	0x000003e7

080002cc <TIM21_IRQHandler>:

void TIM21_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    // タイマ割り込み処理
    if (TIM21->SR & TIM_SR_UIF)
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <TIM21_IRQHandler+0x30>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4013      	ands	r3, r2
 80002d8:	d00c      	beq.n	80002f4 <TIM21_IRQHandler+0x28>
    {
        TIM21->SR &= ~TIM_SR_UIF;  // 割り込みフラグをクリア
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <TIM21_IRQHandler+0x30>)
 80002dc:	691a      	ldr	r2, [r3, #16]
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <TIM21_IRQHandler+0x30>)
 80002e0:	2101      	movs	r1, #1
 80002e2:	438a      	bics	r2, r1
 80002e4:	611a      	str	r2, [r3, #16]

        GPIOC->ODR ^= GPIO_ODR_OD15;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <TIM21_IRQHandler+0x34>)
 80002e8:	695a      	ldr	r2, [r3, #20]
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <TIM21_IRQHandler+0x34>)
 80002ec:	2180      	movs	r1, #128	; 0x80
 80002ee:	0209      	lsls	r1, r1, #8
 80002f0:	404a      	eors	r2, r1
 80002f2:	615a      	str	r2, [r3, #20]

    }
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	40010800 	.word	0x40010800
 8000300:	50000800 	.word	0x50000800

08000304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000308:	e7fe      	b.n	8000308 <NMI_Handler+0x4>

0800030a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030e:	e7fe      	b.n	800030e <HardFault_Handler+0x4>

08000310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000328:	f000 f84a 	bl	80003c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800033c:	4813      	ldr	r0, [pc, #76]	; (800038c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f7ff fff7 	bl	8000332 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000344:	4812      	ldr	r0, [pc, #72]	; (8000390 <LoopForever+0x6>)
    LDR R1, [R0]
 8000346:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000348:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <LoopForever+0xa>)
    CMP R1, R2
 800034c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800034e:	d105      	bne.n	800035c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000350:	4811      	ldr	r0, [pc, #68]	; (8000398 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000352:	4912      	ldr	r1, [pc, #72]	; (800039c <LoopForever+0x12>)
    STR R1, [R0]
 8000354:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000356:	4812      	ldr	r0, [pc, #72]	; (80003a0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000358:	4912      	ldr	r1, [pc, #72]	; (80003a4 <LoopForever+0x1a>)
    STR R1, [R0]
 800035a:	6001      	str	r1, [r0, #0]

0800035c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	4812      	ldr	r0, [pc, #72]	; (80003a8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800035e:	4913      	ldr	r1, [pc, #76]	; (80003ac <LoopForever+0x22>)
  ldr r2, =_sidata
 8000360:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <LoopForever+0x26>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000374:	4c10      	ldr	r4, [pc, #64]	; (80003b8 <LoopForever+0x2e>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000382:	f000 f82f 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000386:	f7ff ff47 	bl	8000218 <main>

0800038a <LoopForever>:

LoopForever:
    b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
   ldr   r0, =_estack
 800038c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000390:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000394:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000398:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800039c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80003a0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80003a4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003b0:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b8:	20000024 	.word	0x20000024

080003bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_IRQHandler>
	...

080003c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <HAL_IncTick+0x1c>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	001a      	movs	r2, r3
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <HAL_IncTick+0x20>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	18d2      	adds	r2, r2, r3
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <HAL_IncTick+0x20>)
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000020 	.word	0x20000020

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	2600      	movs	r6, #0
 80003e8:	4c0c      	ldr	r4, [pc, #48]	; (800041c <__libc_init_array+0x38>)
 80003ea:	4d0d      	ldr	r5, [pc, #52]	; (8000420 <__libc_init_array+0x3c>)
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	2600      	movs	r6, #0
 80003f6:	f000 f819 	bl	800042c <_init>
 80003fa:	4c0a      	ldr	r4, [pc, #40]	; (8000424 <__libc_init_array+0x40>)
 80003fc:	4d0a      	ldr	r5, [pc, #40]	; (8000428 <__libc_init_array+0x44>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	00b3      	lsls	r3, r6, #2
 800040a:	58eb      	ldr	r3, [r5, r3]
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	00b3      	lsls	r3, r6, #2
 8000414:	58eb      	ldr	r3, [r5, r3]
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000448 	.word	0x08000448
 8000428:	08000444 	.word	0x08000444

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
