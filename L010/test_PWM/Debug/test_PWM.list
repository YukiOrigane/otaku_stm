
test_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c0  080004c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004c8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004cc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004cc  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000105c  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000059e  00000000  00000000  000210cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000147  00000000  00000000  00021840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ef86  00000000  00000000  00021987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022c6  00000000  00000000  0003090d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005f56f  00000000  00000000  00032bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000514  00000000  00000000  00092144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00092658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080004a8 	.word	0x080004a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080004a8 	.word	0x080004a8

08000108 <main>:
    // タイマを停止
    SysTick->CTRL = 0;
}

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
    // STM32L0xxのクロック設定（デフォルトのHSIクロックを使用）->MSI
	RCC->CR |= RCC_CR_HSION;	// HSI始動
 800010e:	4b62      	ldr	r3, [pc, #392]	; (8000298 <main+0x190>)
 8000110:	681a      	ldr	r2, [r3, #0]
 8000112:	4b61      	ldr	r3, [pc, #388]	; (8000298 <main+0x190>)
 8000114:	2101      	movs	r1, #1
 8000116:	430a      	orrs	r2, r1
 8000118:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR&RCC_CR_HSIRDY));	// クロック安定化を待機
 800011a:	46c0      	nop			; (mov r8, r8)
 800011c:	4b5e      	ldr	r3, [pc, #376]	; (8000298 <main+0x190>)
 800011e:	681b      	ldr	r3, [r3, #0]
 8000120:	2204      	movs	r2, #4
 8000122:	4013      	ands	r3, r2
 8000124:	d0fa      	beq.n	800011c <main+0x14>
	RCC->CFGR |= RCC_CFGR_SW_HSI;	// HSIをクロック源として選択
 8000126:	4b5c      	ldr	r3, [pc, #368]	; (8000298 <main+0x190>)
 8000128:	68da      	ldr	r2, [r3, #12]
 800012a:	4b5b      	ldr	r3, [pc, #364]	; (8000298 <main+0x190>)
 800012c:	2101      	movs	r1, #1
 800012e:	430a      	orrs	r2, r1
 8000130:	60da      	str	r2, [r3, #12]

	// RCC（Reset and Clock Control）クロックを有効化
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000132:	4b59      	ldr	r3, [pc, #356]	; (8000298 <main+0x190>)
 8000134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000136:	4b58      	ldr	r3, [pc, #352]	; (8000298 <main+0x190>)
 8000138:	2101      	movs	r1, #1
 800013a:	430a      	orrs	r2, r1
 800013c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 800013e:	4b56      	ldr	r3, [pc, #344]	; (8000298 <main+0x190>)
 8000140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000142:	4b55      	ldr	r3, [pc, #340]	; (8000298 <main+0x190>)
 8000144:	2104      	movs	r1, #4
 8000146:	430a      	orrs	r2, r1
 8000148:	62da      	str	r2, [r3, #44]	; 0x2c

	GPIOA->MODER &= ~GPIO_MODER_MODE0_Msk;
 800014a:	23a0      	movs	r3, #160	; 0xa0
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	681a      	ldr	r2, [r3, #0]
 8000150:	23a0      	movs	r3, #160	; 0xa0
 8000152:	05db      	lsls	r3, r3, #23
 8000154:	2103      	movs	r1, #3
 8000156:	438a      	bics	r2, r1
 8000158:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODE_AF_PP << GPIO_MODER_MODE0_Pos);
 800015a:	23a0      	movs	r3, #160	; 0xa0
 800015c:	05db      	lsls	r3, r3, #23
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	23a0      	movs	r3, #160	; 0xa0
 8000162:	05db      	lsls	r3, r3, #23
 8000164:	2102      	movs	r1, #2
 8000166:	430a      	orrs	r2, r1
 8000168:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_Msk;
 800016a:	23a0      	movs	r3, #160	; 0xa0
 800016c:	05db      	lsls	r3, r3, #23
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	23a0      	movs	r3, #160	; 0xa0
 8000172:	05db      	lsls	r3, r3, #23
 8000174:	210c      	movs	r1, #12
 8000176:	438a      	bics	r2, r1
 8000178:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODE_AF_PP << GPIO_MODER_MODE1_Pos);
 800017a:	23a0      	movs	r3, #160	; 0xa0
 800017c:	05db      	lsls	r3, r3, #23
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	23a0      	movs	r3, #160	; 0xa0
 8000182:	05db      	lsls	r3, r3, #23
 8000184:	2108      	movs	r1, #8
 8000186:	430a      	orrs	r2, r1
 8000188:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE2_Msk;
 800018a:	23a0      	movs	r3, #160	; 0xa0
 800018c:	05db      	lsls	r3, r3, #23
 800018e:	681a      	ldr	r2, [r3, #0]
 8000190:	23a0      	movs	r3, #160	; 0xa0
 8000192:	05db      	lsls	r3, r3, #23
 8000194:	2130      	movs	r1, #48	; 0x30
 8000196:	438a      	bics	r2, r1
 8000198:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos);
 800019a:	23a0      	movs	r3, #160	; 0xa0
 800019c:	05db      	lsls	r3, r3, #23
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	23a0      	movs	r3, #160	; 0xa0
 80001a2:	05db      	lsls	r3, r3, #23
 80001a4:	2120      	movs	r1, #32
 80001a6:	430a      	orrs	r2, r1
 80001a8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE3_Msk;
 80001aa:	23a0      	movs	r3, #160	; 0xa0
 80001ac:	05db      	lsls	r3, r3, #23
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	23a0      	movs	r3, #160	; 0xa0
 80001b2:	05db      	lsls	r3, r3, #23
 80001b4:	21c0      	movs	r1, #192	; 0xc0
 80001b6:	438a      	bics	r2, r1
 80001b8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos);
 80001ba:	23a0      	movs	r3, #160	; 0xa0
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	23a0      	movs	r3, #160	; 0xa0
 80001c2:	05db      	lsls	r3, r3, #23
 80001c4:	2180      	movs	r1, #128	; 0x80
 80001c6:	430a      	orrs	r2, r1
 80001c8:	601a      	str	r2, [r3, #0]
	//GPIOA->MODER &= ~(3U << (2 * 0));  // ビット0をクリア（リセット）
	//GPIOA->MODER |= (2U << (2 * 0));   // PA0をAlternate Functionモードに設定
	GPIOA->AFR[0] |= (GPIO_AF2_TIM2 << GPIO_AFRL_AFSEL0_Pos);
 80001ca:	23a0      	movs	r3, #160	; 0xa0
 80001cc:	05db      	lsls	r3, r3, #23
 80001ce:	6a1a      	ldr	r2, [r3, #32]
 80001d0:	23a0      	movs	r3, #160	; 0xa0
 80001d2:	05db      	lsls	r3, r3, #23
 80001d4:	2102      	movs	r1, #2
 80001d6:	430a      	orrs	r2, r1
 80001d8:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (GPIO_AF2_TIM2 << GPIO_AFRL_AFSEL1_Pos);
 80001da:	23a0      	movs	r3, #160	; 0xa0
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	6a1a      	ldr	r2, [r3, #32]
 80001e0:	23a0      	movs	r3, #160	; 0xa0
 80001e2:	05db      	lsls	r3, r3, #23
 80001e4:	2120      	movs	r1, #32
 80001e6:	430a      	orrs	r2, r1
 80001e8:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (GPIO_AF2_TIM2 << GPIO_AFRL_AFSEL2_Pos);
 80001ea:	23a0      	movs	r3, #160	; 0xa0
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	6a1a      	ldr	r2, [r3, #32]
 80001f0:	23a0      	movs	r3, #160	; 0xa0
 80001f2:	05db      	lsls	r3, r3, #23
 80001f4:	2180      	movs	r1, #128	; 0x80
 80001f6:	0089      	lsls	r1, r1, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (GPIO_AF2_TIM2 << GPIO_AFRL_AFSEL3_Pos);
 80001fc:	23a0      	movs	r3, #160	; 0xa0
 80001fe:	05db      	lsls	r3, r3, #23
 8000200:	6a1a      	ldr	r2, [r3, #32]
 8000202:	23a0      	movs	r3, #160	; 0xa0
 8000204:	05db      	lsls	r3, r3, #23
 8000206:	2180      	movs	r1, #128	; 0x80
 8000208:	0189      	lsls	r1, r1, #6
 800020a:	430a      	orrs	r2, r1
 800020c:	621a      	str	r2, [r3, #32]
	//GPIOA->MODER &= ~GPIO_MODER_MODE0_Msk;
	//GPIOA->MODER |= (2 << GPIO_MODER_MODE0_Pos);
	//GPIOA->MODER &= ~GPIO_MODER_MODE3_Msk;
	//GPIOA->MODER |= (2 << GPIO_MODER_MODE3_Pos);

	GPIOC->MODER &= ~GPIO_MODER_MODE15_Msk;
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <main+0x194>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b22      	ldr	r3, [pc, #136]	; (800029c <main+0x194>)
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	0892      	lsrs	r2, r2, #2
 8000218:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (GPIO_MODE_OUTPUT_PP << GPIO_MODER_MODE15_Pos);
 800021a:	4b20      	ldr	r3, [pc, #128]	; (800029c <main+0x194>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b1f      	ldr	r3, [pc, #124]	; (800029c <main+0x194>)
 8000220:	2180      	movs	r1, #128	; 0x80
 8000222:	05c9      	lsls	r1, r1, #23
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]


    // TIM2の設定
    TIM2_Configuration();
 8000228:	f000 f83c 	bl	80002a4 <TIM2_Configuration>

    // TIM2を有効化
    TIM2->CR1 |= TIM_CR1_CEN;
 800022c:	2380      	movs	r3, #128	; 0x80
 800022e:	05db      	lsls	r3, r3, #23
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	2380      	movs	r3, #128	; 0x80
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	2101      	movs	r1, #1
 8000238:	430a      	orrs	r2, r1
 800023a:	601a      	str	r2, [r3, #0]

    while (1)
    {
        // メインの処理をここに追加
    	TIM2->CCR4 = 1480;
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	22b9      	movs	r2, #185	; 0xb9
 8000242:	00d2      	lsls	r2, r2, #3
 8000244:	641a      	str	r2, [r3, #64]	; 0x40
    	GPIOC->BSRR |= GPIO_BSRR_BS_15;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <main+0x194>)
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <main+0x194>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0209      	lsls	r1, r1, #8
 8000250:	430a      	orrs	r2, r1
 8000252:	619a      	str	r2, [r3, #24]
    	for(int i = 0; i<10000; i++);
 8000254:	2300      	movs	r3, #0
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	e002      	b.n	8000260 <main+0x158>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	4a0f      	ldr	r2, [pc, #60]	; (80002a0 <main+0x198>)
 8000264:	4293      	cmp	r3, r2
 8000266:	ddf8      	ble.n	800025a <main+0x152>
    	TIM2->CCR4 = 1600;
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	22c8      	movs	r2, #200	; 0xc8
 800026e:	00d2      	lsls	r2, r2, #3
 8000270:	641a      	str	r2, [r3, #64]	; 0x40
    	GPIOC->BRR |= GPIO_BRR_BR_15;
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <main+0x194>)
 8000274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0x194>)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	0209      	lsls	r1, r1, #8
 800027c:	430a      	orrs	r2, r1
 800027e:	629a      	str	r2, [r3, #40]	; 0x28
    	for(int i = 0; i<10000; i++);
 8000280:	2300      	movs	r3, #0
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	e002      	b.n	800028c <main+0x184>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <main+0x198>)
 8000290:	4293      	cmp	r3, r2
 8000292:	ddf8      	ble.n	8000286 <main+0x17e>
    	TIM2->CCR4 = 1480;
 8000294:	e7d2      	b.n	800023c <main+0x134>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	40021000 	.word	0x40021000
 800029c:	50000800 	.word	0x50000800
 80002a0:	0000270f 	.word	0x0000270f

080002a4 <TIM2_Configuration>:
    	//delay_ms(1000);
    }
}

void TIM2_Configuration(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002a8:	4b2f      	ldr	r3, [pc, #188]	; (8000368 <TIM2_Configuration+0xc4>)
 80002aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80002ac:	4b2e      	ldr	r3, [pc, #184]	; (8000368 <TIM2_Configuration+0xc4>)
 80002ae:	2101      	movs	r1, #1
 80002b0:	430a      	orrs	r2, r1
 80002b2:	639a      	str	r2, [r3, #56]	; 0x38

    // TIM2のクロック周波数を設定
    // 16 MHzクロックを使用する場合、プリスケーラを16に設定して1 MHzのタイマークロックを得る
    TIM2->PSC = 16 - 1;
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	220f      	movs	r2, #15
 80002ba:	629a      	str	r2, [r3, #40]	; 0x28

    // PWMの設定
    TIM2->ARR = 19999;   // ARRレジスタを設定して周期を設定 (20Hz)
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	05db      	lsls	r3, r3, #23
 80002c0:	4a2a      	ldr	r2, [pc, #168]	; (800036c <TIM2_Configuration+0xc8>)
 80002c2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR1 = 5000;   // CCR1レジスタを設定してデューティーサイクルを設定
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	4a29      	ldr	r2, [pc, #164]	; (8000370 <TIM2_Configuration+0xcc>)
 80002ca:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = 10000;   // CCR1レジスタを設定してデューティーサイクルを設定
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	4a28      	ldr	r2, [pc, #160]	; (8000374 <TIM2_Configuration+0xd0>)
 80002d2:	639a      	str	r2, [r3, #56]	; 0x38
    TIM2->CCR3 = 15000;   // CCR1レジスタを設定してデューティーサイクルを設定
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <TIM2_Configuration+0xd4>)
 80002da:	63da      	str	r2, [r3, #60]	; 0x3c

    // TIM2のチャンネル1をPWMモードに設定
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;  // PWMモード1
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	699a      	ldr	r2, [r3, #24]
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2160      	movs	r1, #96	; 0x60
 80002e8:	430a      	orrs	r2, r1
 80002ea:	619a      	str	r2, [r3, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;  // PWMモード1
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	699a      	ldr	r2, [r3, #24]
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	21c0      	movs	r1, #192	; 0xc0
 80002f8:	01c9      	lsls	r1, r1, #7
 80002fa:	430a      	orrs	r2, r1
 80002fc:	619a      	str	r2, [r3, #24]
    TIM2->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;  // PWMモード1
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	69da      	ldr	r2, [r3, #28]
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	2160      	movs	r1, #96	; 0x60
 800030a:	430a      	orrs	r2, r1
 800030c:	61da      	str	r2, [r3, #28]
    TIM2->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;  // PWMモード1
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	05db      	lsls	r3, r3, #23
 8000312:	69da      	ldr	r2, [r3, #28]
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	21c0      	movs	r1, #192	; 0xc0
 800031a:	01c9      	lsls	r1, r1, #7
 800031c:	430a      	orrs	r2, r1
 800031e:	61da      	str	r2, [r3, #28]

    // TIM2のチャンネル1の出力を有効化
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	6a1a      	ldr	r2, [r3, #32]
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	4914      	ldr	r1, [pc, #80]	; (800037c <TIM2_Configuration+0xd8>)
 800032c:	430a      	orrs	r2, r1
 800032e:	621a      	str	r2, [r3, #32]

    // TIM2をPWMモードに設定
    TIM2->CR1 |= TIM_CR1_ARPE;  // 自動リロードプリロードを有効化
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	05db      	lsls	r3, r3, #23
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	430a      	orrs	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
    TIM2->EGR |= TIM_EGR_UG;    // タイマー更新イベントを生成
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	05db      	lsls	r3, r3, #23
 8000344:	695a      	ldr	r2, [r3, #20]
 8000346:	2380      	movs	r3, #128	; 0x80
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2101      	movs	r1, #1
 800034c:	430a      	orrs	r2, r1
 800034e:	615a      	str	r2, [r3, #20]
    TIM2->CR1 |= TIM_CR1_CEN;   // TIM2を有効化
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	05db      	lsls	r3, r3, #23
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	2380      	movs	r3, #128	; 0x80
 8000358:	05db      	lsls	r3, r3, #23
 800035a:	2101      	movs	r1, #1
 800035c:	430a      	orrs	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	40021000 	.word	0x40021000
 800036c:	00004e1f 	.word	0x00004e1f
 8000370:	00001388 	.word	0x00001388
 8000374:	00002710 	.word	0x00002710
 8000378:	00003a98 	.word	0x00003a98
 800037c:	00001111 	.word	0x00001111

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <NMI_Handler+0x4>

08000386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <HardFault_Handler+0x4>

0800038c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a4:	f000 f84a 	bl	800043c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80003b8:	4813      	ldr	r0, [pc, #76]	; (8000408 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003bc:	f7ff fff7 	bl	80003ae <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80003c0:	4812      	ldr	r0, [pc, #72]	; (800040c <LoopForever+0x6>)
    LDR R1, [R0]
 80003c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80003c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <LoopForever+0xa>)
    CMP R1, R2
 80003c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80003ca:	d105      	bne.n	80003d8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80003cc:	4811      	ldr	r0, [pc, #68]	; (8000414 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80003ce:	4912      	ldr	r1, [pc, #72]	; (8000418 <LoopForever+0x12>)
    STR R1, [R0]
 80003d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80003d2:	4812      	ldr	r0, [pc, #72]	; (800041c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80003d4:	4912      	ldr	r1, [pc, #72]	; (8000420 <LoopForever+0x1a>)
    STR R1, [R0]
 80003d6:	6001      	str	r1, [r0, #0]

080003d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	4812      	ldr	r0, [pc, #72]	; (8000424 <LoopForever+0x1e>)
  ldr r1, =_edata
 80003da:	4913      	ldr	r1, [pc, #76]	; (8000428 <LoopForever+0x22>)
  ldr r2, =_sidata
 80003dc:	4a13      	ldr	r2, [pc, #76]	; (800042c <LoopForever+0x26>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a10      	ldr	r2, [pc, #64]	; (8000430 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80003f0:	4c10      	ldr	r4, [pc, #64]	; (8000434 <LoopForever+0x2e>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003fe:	f000 f82f 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000402:	f7ff fe81 	bl	8000108 <main>

08000406 <LoopForever>:

LoopForever:
    b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
   ldr   r0, =_estack
 8000408:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 800040c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000410:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000414:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000418:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800041c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000420:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800042c:	080004c8 	.word	0x080004c8
  ldr r2, =_sbss
 8000430:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000434:	20000024 	.word	0x20000024

08000438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC1_IRQHandler>
	...

0800043c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <HAL_IncTick+0x1c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	001a      	movs	r2, r3
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <HAL_IncTick+0x20>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	18d2      	adds	r2, r2, r3
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <HAL_IncTick+0x20>)
 800044e:	601a      	str	r2, [r3, #0]
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000000 	.word	0x20000000
 800045c:	20000020 	.word	0x20000020

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	2600      	movs	r6, #0
 8000464:	4c0c      	ldr	r4, [pc, #48]	; (8000498 <__libc_init_array+0x38>)
 8000466:	4d0d      	ldr	r5, [pc, #52]	; (800049c <__libc_init_array+0x3c>)
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	42a6      	cmp	r6, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	2600      	movs	r6, #0
 8000472:	f000 f819 	bl	80004a8 <_init>
 8000476:	4c0a      	ldr	r4, [pc, #40]	; (80004a0 <__libc_init_array+0x40>)
 8000478:	4d0a      	ldr	r5, [pc, #40]	; (80004a4 <__libc_init_array+0x44>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	42a6      	cmp	r6, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	00b3      	lsls	r3, r6, #2
 8000486:	58eb      	ldr	r3, [r5, r3]
 8000488:	4798      	blx	r3
 800048a:	3601      	adds	r6, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	00b3      	lsls	r3, r6, #2
 8000490:	58eb      	ldr	r3, [r5, r3]
 8000492:	4798      	blx	r3
 8000494:	3601      	adds	r6, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c0 	.word	0x080004c0
 800049c:	080004c0 	.word	0x080004c0
 80004a0:	080004c4 	.word	0x080004c4
 80004a4:	080004c0 	.word	0x080004c0

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
