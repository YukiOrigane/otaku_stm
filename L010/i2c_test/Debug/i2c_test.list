
i2c_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  0800040c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000414  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000418  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000418  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f46  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000579  00000000  00000000  00020fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014d  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e73c  00000000  00000000  00021855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021b8  00000000  00000000  0002ff91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00059452  00000000  00000000  00032149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000052c  00000000  00000000  0008b59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0008bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080003f4 	.word	0x080003f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080003f4 	.word	0x080003f4

08000108 <main>:

uint8_t receivedData;
volatile uint8_t dataReceived = 0;

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
    // STM32L0xxのクロック設定（デフォルトのHSIクロックを使用）
	// STM32L0xxのクロック設定（デフォルトのHSIクロックを使用）->MSI
	RCC->CR |= RCC_CR_HSION;	// HSI始動
 800010e:	4b1c      	ldr	r3, [pc, #112]	; (8000180 <main+0x78>)
 8000110:	681a      	ldr	r2, [r3, #0]
 8000112:	4b1b      	ldr	r3, [pc, #108]	; (8000180 <main+0x78>)
 8000114:	2101      	movs	r1, #1
 8000116:	430a      	orrs	r2, r1
 8000118:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR&RCC_CR_HSIRDY));	// クロック安定化を待機
 800011a:	46c0      	nop			; (mov r8, r8)
 800011c:	4b18      	ldr	r3, [pc, #96]	; (8000180 <main+0x78>)
 800011e:	681b      	ldr	r3, [r3, #0]
 8000120:	2204      	movs	r2, #4
 8000122:	4013      	ands	r3, r2
 8000124:	d0fa      	beq.n	800011c <main+0x14>
	RCC->CFGR |= RCC_CFGR_SW_HSI;	// HSIをクロック源として選択
 8000126:	4b16      	ldr	r3, [pc, #88]	; (8000180 <main+0x78>)
 8000128:	68da      	ldr	r2, [r3, #12]
 800012a:	4b15      	ldr	r3, [pc, #84]	; (8000180 <main+0x78>)
 800012c:	2101      	movs	r1, #1
 800012e:	430a      	orrs	r2, r1
 8000130:	60da      	str	r2, [r3, #12]

    // GPIOとI2Cの設定
	GPIO_Configuration();
 8000132:	f000 f861 	bl	80001f8 <GPIO_Configuration>
	I2C_Slave_Configuration();
 8000136:	f000 f82b 	bl	8000190 <I2C_Slave_Configuration>

    while (1)
    {
        // メインの処理をここに追加
    	int i = 0;
 800013a:	2300      	movs	r3, #0
 800013c:	607b      	str	r3, [r7, #4]

    	if ((I2C1->ISR & I2C_ISR_ADDR) == I2C_ISR_ADDR){
 800013e:	4b11      	ldr	r3, [pc, #68]	; (8000184 <main+0x7c>)
 8000140:	699b      	ldr	r3, [r3, #24]
 8000142:	2208      	movs	r2, #8
 8000144:	4013      	ands	r3, r2
 8000146:	2b08      	cmp	r3, #8
 8000148:	d112      	bne.n	8000170 <main+0x68>
    		I2C1->ICR |= I2C_ICR_ADDRCF;
 800014a:	4b0e      	ldr	r3, [pc, #56]	; (8000184 <main+0x7c>)
 800014c:	69da      	ldr	r2, [r3, #28]
 800014e:	4b0d      	ldr	r3, [pc, #52]	; (8000184 <main+0x7c>)
 8000150:	2108      	movs	r1, #8
 8000152:	430a      	orrs	r2, r1
 8000154:	61da      	str	r2, [r3, #28]
    		GPIOC->ODR ^= GPIO_ODR_OD15;
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <main+0x80>)
 8000158:	695a      	ldr	r2, [r3, #20]
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <main+0x80>)
 800015c:	2180      	movs	r1, #128	; 0x80
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	404a      	eors	r2, r1
 8000162:	615a      	str	r2, [r3, #20]
    	}
    	while((I2C1->ISR & I2C_ISR_RXNE) == I2C_ISR_RXNE){
 8000164:	e004      	b.n	8000170 <main+0x68>
    		receivedData = I2C1->RXDR;
 8000166:	4b07      	ldr	r3, [pc, #28]	; (8000184 <main+0x7c>)
 8000168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800016a:	b2da      	uxtb	r2, r3
 800016c:	4b07      	ldr	r3, [pc, #28]	; (800018c <main+0x84>)
 800016e:	701a      	strb	r2, [r3, #0]
    	while((I2C1->ISR & I2C_ISR_RXNE) == I2C_ISR_RXNE){
 8000170:	4b04      	ldr	r3, [pc, #16]	; (8000184 <main+0x7c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	2204      	movs	r2, #4
 8000176:	4013      	ands	r3, r2
 8000178:	2b04      	cmp	r3, #4
 800017a:	d0f4      	beq.n	8000166 <main+0x5e>
    {
 800017c:	e7dd      	b.n	800013a <main+0x32>
 800017e:	46c0      	nop			; (mov r8, r8)
 8000180:	40021000 	.word	0x40021000
 8000184:	40005400 	.word	0x40005400
 8000188:	50000800 	.word	0x50000800
 800018c:	20000020 	.word	0x20000020

08000190 <I2C_Slave_Configuration>:
    	}
    }
}

void I2C_Slave_Configuration(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
    // I2C1のクロックを有効化
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <I2C_Slave_Configuration+0x58>)
 8000196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <I2C_Slave_Configuration+0x58>)
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	0389      	lsls	r1, r1, #14
 800019e:	430a      	orrs	r2, r1
 80001a0:	639a      	str	r2, [r3, #56]	; 0x38

    // I2C1をリセット
    //RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
    //RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;

    I2C1->CR1 &= ~I2C_CR1_PE;	// PEビットをクリア
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001a8:	2101      	movs	r1, #1
 80001aa:	438a      	bics	r2, r1
 80001ac:	601a      	str	r2, [r3, #0]

    I2C1->TIMINGR = 0x00303D5B;
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001b0:	4a0f      	ldr	r2, [pc, #60]	; (80001f0 <I2C_Slave_Configuration+0x60>)
 80001b2:	611a      	str	r2, [r3, #16]

    // I2C1の設定を有効化
    I2C1->CR1 |= I2C_CR1_PE;
 80001b4:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001ba:	2101      	movs	r1, #1
 80001bc:	430a      	orrs	r2, r1
 80001be:	601a      	str	r2, [r3, #0]

    // アドレス選択をクリア
    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001c2:	689a      	ldr	r2, [r3, #8]
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001c6:	490b      	ldr	r1, [pc, #44]	; (80001f4 <I2C_Slave_Configuration+0x64>)
 80001c8:	400a      	ands	r2, r1
 80001ca:	609a      	str	r2, [r3, #8]

    // I2C1のスレーブアドレスを設定
    I2C1->OAR1 = (uint32_t)(0x30); // 7ビットアドレス 0x3E (マスク設定: 0)
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001ce:	2230      	movs	r2, #48	; 0x30
 80001d0:	609a      	str	r2, [r3, #8]

    // I2C1のアドレスマッチングを有効化
    I2C1->OAR1 |= I2C_OAR1_OA1EN;
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001d4:	689a      	ldr	r2, [r3, #8]
 80001d6:	4b05      	ldr	r3, [pc, #20]	; (80001ec <I2C_Slave_Configuration+0x5c>)
 80001d8:	2180      	movs	r1, #128	; 0x80
 80001da:	0209      	lsls	r1, r1, #8
 80001dc:	430a      	orrs	r2, r1
 80001de:	609a      	str	r2, [r3, #8]
    //I2C1->CR1 |= I2C_CR1_ADDRIE;

    // 割り込み設定
    //NVIC_EnableIRQ(I2C1_IRQn);
    //NVIC_SetPriority(I2C1_IRQn, 0);
}
 80001e0:	46c0      	nop			; (mov r8, r8)
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	46c0      	nop			; (mov r8, r8)
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40005400 	.word	0x40005400
 80001f0:	00303d5b 	.word	0x00303d5b
 80001f4:	ffff7fff 	.word	0xffff7fff

080001f8 <GPIO_Configuration>:

void GPIO_Configuration(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    // GPIOAクロックを有効化
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80001fc:	4b2c      	ldr	r3, [pc, #176]	; (80002b0 <GPIO_Configuration+0xb8>)
 80001fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000200:	4b2b      	ldr	r3, [pc, #172]	; (80002b0 <GPIO_Configuration+0xb8>)
 8000202:	2101      	movs	r1, #1
 8000204:	430a      	orrs	r2, r1
 8000206:	62da      	str	r2, [r3, #44]	; 0x2c

    // PA4 (I2C1_SCL)、PA10 (I2C1_SDA)をI2Cモードに設定
    GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE10);
 8000208:	23a0      	movs	r3, #160	; 0xa0
 800020a:	05db      	lsls	r3, r3, #23
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	23a0      	movs	r3, #160	; 0xa0
 8000210:	05db      	lsls	r3, r3, #23
 8000212:	4928      	ldr	r1, [pc, #160]	; (80002b4 <GPIO_Configuration+0xbc>)
 8000214:	400a      	ands	r2, r1
 8000216:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (GPIO_MODE_AF_OD  << GPIO_MODER_MODE4_Pos) | (GPIO_MODE_AF_OD  << GPIO_MODER_MODE10_Pos);
 8000218:	23a0      	movs	r3, #160	; 0xa0
 800021a:	05db      	lsls	r3, r3, #23
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	23a0      	movs	r3, #160	; 0xa0
 8000220:	05db      	lsls	r3, r3, #23
 8000222:	4925      	ldr	r1, [pc, #148]	; (80002b8 <GPIO_Configuration+0xc0>)
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]

    // I2C1_SCLとI2C1_SDAのオルタネート機能を設定
    GPIOA->AFR[0] |= (GPIO_AF3_I2C1 << GPIO_AFRL_AFSEL4_Pos);
 8000228:	23a0      	movs	r3, #160	; 0xa0
 800022a:	05db      	lsls	r3, r3, #23
 800022c:	6a1a      	ldr	r2, [r3, #32]
 800022e:	23a0      	movs	r3, #160	; 0xa0
 8000230:	05db      	lsls	r3, r3, #23
 8000232:	21c0      	movs	r1, #192	; 0xc0
 8000234:	0289      	lsls	r1, r1, #10
 8000236:	430a      	orrs	r2, r1
 8000238:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[1] |= (GPIO_AF1_I2C1 << GPIO_AFRH_AFSEL10_Pos);
 800023a:	23a0      	movs	r3, #160	; 0xa0
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000240:	23a0      	movs	r3, #160	; 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	0049      	lsls	r1, r1, #1
 8000248:	430a      	orrs	r2, r1
 800024a:	625a      	str	r2, [r3, #36]	; 0x24

    GPIOA->OTYPER |= (1<<4) | (1<<10);
 800024c:	23a0      	movs	r3, #160	; 0xa0
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	23a0      	movs	r3, #160	; 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2182      	movs	r1, #130	; 0x82
 8000258:	00c9      	lsls	r1, r1, #3
 800025a:	430a      	orrs	r2, r1
 800025c:	605a      	str	r2, [r3, #4]

    GPIOA->OSPEEDR |= (GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDER_OSPEED4_Pos);
 800025e:	23a0      	movs	r3, #160	; 0xa0
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	689a      	ldr	r2, [r3, #8]
 8000264:	23a0      	movs	r3, #160	; 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	21c0      	movs	r1, #192	; 0xc0
 800026a:	0089      	lsls	r1, r1, #2
 800026c:	430a      	orrs	r2, r1
 800026e:	609a      	str	r2, [r3, #8]
    GPIOA->OSPEEDR |= (GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDER_OSPEED10_Pos);
 8000270:	23a0      	movs	r3, #160	; 0xa0
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	23a0      	movs	r3, #160	; 0xa0
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	21c0      	movs	r1, #192	; 0xc0
 800027c:	0389      	lsls	r1, r1, #14
 800027e:	430a      	orrs	r2, r1
 8000280:	609a      	str	r2, [r3, #8]

    RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <GPIO_Configuration+0xb8>)
 8000284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <GPIO_Configuration+0xb8>)
 8000288:	2104      	movs	r1, #4
 800028a:	430a      	orrs	r2, r1
 800028c:	62da      	str	r2, [r3, #44]	; 0x2c
    GPIOC->MODER &= ~GPIO_MODER_MODE15_Msk;
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <GPIO_Configuration+0xc4>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <GPIO_Configuration+0xc4>)
 8000294:	0092      	lsls	r2, r2, #2
 8000296:	0892      	lsrs	r2, r2, #2
 8000298:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (GPIO_MODE_OUTPUT_PP << GPIO_MODER_MODE15_Pos);
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <GPIO_Configuration+0xc4>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <GPIO_Configuration+0xc4>)
 80002a0:	2180      	movs	r1, #128	; 0x80
 80002a2:	05c9      	lsls	r1, r1, #23
 80002a4:	430a      	orrs	r2, r1
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	40021000 	.word	0x40021000
 80002b4:	ffcffcff 	.word	0xffcffcff
 80002b8:	01201200 	.word	0x01201200
 80002bc:	50000800 	.word	0x50000800

080002c0 <I2C1_IRQHandler>:

void I2C1_IRQHandler(void)
{/*
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    {
    	GPIOC->ODR ^= GPIO_ODR_OD15;
        // データを受信
        receivedData = I2C1->RXDR;
    }*/
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <NMI_Handler+0x4>

080002d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <HardFault_Handler+0x4>

080002d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ee:	f000 f84b 	bl	8000388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000304:	4813      	ldr	r0, [pc, #76]	; (8000354 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f7ff fff6 	bl	80002f8 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800030c:	4812      	ldr	r0, [pc, #72]	; (8000358 <LoopForever+0x6>)
    LDR R1, [R0]
 800030e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000310:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <LoopForever+0xa>)
    CMP R1, R2
 8000314:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000316:	d105      	bne.n	8000324 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000318:	4811      	ldr	r0, [pc, #68]	; (8000360 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800031a:	4912      	ldr	r1, [pc, #72]	; (8000364 <LoopForever+0x12>)
    STR R1, [R0]
 800031c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800031e:	4812      	ldr	r0, [pc, #72]	; (8000368 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000320:	4912      	ldr	r1, [pc, #72]	; (800036c <LoopForever+0x1a>)
    STR R1, [R0]
 8000322:	6001      	str	r1, [r0, #0]

08000324 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	4812      	ldr	r0, [pc, #72]	; (8000370 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000326:	4913      	ldr	r1, [pc, #76]	; (8000374 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000328:	4a13      	ldr	r2, [pc, #76]	; (8000378 <LoopForever+0x26>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a10      	ldr	r2, [pc, #64]	; (800037c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800033c:	4c10      	ldr	r4, [pc, #64]	; (8000380 <LoopForever+0x2e>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800034a:	f000 f82f 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800034e:	f7ff fedb 	bl	8000108 <main>

08000352 <LoopForever>:

LoopForever:
    b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
   ldr   r0, =_estack
 8000354:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000358:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800035c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000360:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000364:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000368:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800036c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000378:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 800037c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000380:	20000028 	.word	0x20000028

08000384 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_IRQHandler>
	...

08000388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <HAL_IncTick+0x1c>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	001a      	movs	r2, r3
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <HAL_IncTick+0x20>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	18d2      	adds	r2, r2, r3
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <HAL_IncTick+0x20>)
 800039a:	601a      	str	r2, [r3, #0]
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000024 	.word	0x20000024

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	2600      	movs	r6, #0
 80003b0:	4c0c      	ldr	r4, [pc, #48]	; (80003e4 <__libc_init_array+0x38>)
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x3c>)
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	2600      	movs	r6, #0
 80003be:	f000 f819 	bl	80003f4 <_init>
 80003c2:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <__libc_init_array+0x40>)
 80003c4:	4d0a      	ldr	r5, [pc, #40]	; (80003f0 <__libc_init_array+0x44>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	00b3      	lsls	r3, r6, #2
 80003d2:	58eb      	ldr	r3, [r5, r3]
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	00b3      	lsls	r3, r6, #2
 80003dc:	58eb      	ldr	r3, [r5, r3]
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	08000410 	.word	0x08000410
 80003f0:	0800040c 	.word	0x0800040c

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
