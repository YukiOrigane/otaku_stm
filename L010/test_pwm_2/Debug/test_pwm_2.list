
test_pwm_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000338  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000338  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000340  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000344  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000344  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f53  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000054c  00000000  00000000  00020fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000146  00000000  00000000  000216e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e73c  00000000  00000000  00021826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002153  00000000  00000000  0002ff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00059416  00000000  00000000  000320b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000050c  00000000  00000000  0008b4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0008b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000320 	.word	0x08000320

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000320 	.word	0x08000320

08000108 <main>:

void TIM2_Configuration(void);
void GPIO_Configuration(void);

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
    // STM32L0xxのクロック設定（デフォルトのHSIクロックを使用）

    // GPIO設定
    GPIO_Configuration();
 800010c:	f000 f846 	bl	800019c <GPIO_Configuration>

    // TIM2の設定
    TIM2_Configuration();
 8000110:	f000 f802 	bl	8000118 <TIM2_Configuration>

    while (1)
 8000114:	e7fe      	b.n	8000114 <main+0xc>
	...

08000118 <TIM2_Configuration>:
        // メインの処理をここに追加
    }
}

void TIM2_Configuration(void)
{
 8000118:	b580      	push	{r7, lr}
 800011a:	af00      	add	r7, sp, #0
    // TIM2のクロックを有効化
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800011c:	4b1c      	ldr	r3, [pc, #112]	; (8000190 <TIM2_Configuration+0x78>)
 800011e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000120:	4b1b      	ldr	r3, [pc, #108]	; (8000190 <TIM2_Configuration+0x78>)
 8000122:	2101      	movs	r1, #1
 8000124:	430a      	orrs	r2, r1
 8000126:	639a      	str	r2, [r3, #56]	; 0x38

    // TIM2のクロック周波数を設定
    // 16 MHzクロックを使用する場合、プリスケーラを16,000に設定して1 kHzのタイマークロックを得る
    TIM2->PSC = 16000 - 1;
 8000128:	2380      	movs	r3, #128	; 0x80
 800012a:	05db      	lsls	r3, r3, #23
 800012c:	4a19      	ldr	r2, [pc, #100]	; (8000194 <TIM2_Configuration+0x7c>)
 800012e:	629a      	str	r2, [r3, #40]	; 0x28

    // PWMの設定
    TIM2->ARR = 1000 - 1;   // ARRレジスタを設定して周期を設定 (1 kHz)
 8000130:	2380      	movs	r3, #128	; 0x80
 8000132:	05db      	lsls	r3, r3, #23
 8000134:	4a18      	ldr	r2, [pc, #96]	; (8000198 <TIM2_Configuration+0x80>)
 8000136:	62da      	str	r2, [r3, #44]	; 0x2c

    // TIM2のチャンネル1をPWMモードに設定
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;  // PWMモード1
 8000138:	2380      	movs	r3, #128	; 0x80
 800013a:	05db      	lsls	r3, r3, #23
 800013c:	699a      	ldr	r2, [r3, #24]
 800013e:	2380      	movs	r3, #128	; 0x80
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	2160      	movs	r1, #96	; 0x60
 8000144:	430a      	orrs	r2, r1
 8000146:	619a      	str	r2, [r3, #24]

    // TIM2のチャンネル1の出力を有効化
    TIM2->CCER |= TIM_CCER_CC1E;
 8000148:	2380      	movs	r3, #128	; 0x80
 800014a:	05db      	lsls	r3, r3, #23
 800014c:	6a1a      	ldr	r2, [r3, #32]
 800014e:	2380      	movs	r3, #128	; 0x80
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2101      	movs	r1, #1
 8000154:	430a      	orrs	r2, r1
 8000156:	621a      	str	r2, [r3, #32]

    // TIM2をPWMモードに設定
    TIM2->CR1 |= TIM_CR1_ARPE;  // 自動リロードプリロードを有効化
 8000158:	2380      	movs	r3, #128	; 0x80
 800015a:	05db      	lsls	r3, r3, #23
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	2380      	movs	r3, #128	; 0x80
 8000160:	05db      	lsls	r3, r3, #23
 8000162:	2180      	movs	r1, #128	; 0x80
 8000164:	430a      	orrs	r2, r1
 8000166:	601a      	str	r2, [r3, #0]
    TIM2->EGR |= TIM_EGR_UG;    // タイマー更新イベントを生成
 8000168:	2380      	movs	r3, #128	; 0x80
 800016a:	05db      	lsls	r3, r3, #23
 800016c:	695a      	ldr	r2, [r3, #20]
 800016e:	2380      	movs	r3, #128	; 0x80
 8000170:	05db      	lsls	r3, r3, #23
 8000172:	2101      	movs	r1, #1
 8000174:	430a      	orrs	r2, r1
 8000176:	615a      	str	r2, [r3, #20]
    TIM2->CR1 |= TIM_CR1_CEN;   // TIM2を有効化
 8000178:	2380      	movs	r3, #128	; 0x80
 800017a:	05db      	lsls	r3, r3, #23
 800017c:	681a      	ldr	r2, [r3, #0]
 800017e:	2380      	movs	r3, #128	; 0x80
 8000180:	05db      	lsls	r3, r3, #23
 8000182:	2101      	movs	r1, #1
 8000184:	430a      	orrs	r2, r1
 8000186:	601a      	str	r2, [r3, #0]
}
 8000188:	46c0      	nop			; (mov r8, r8)
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	40021000 	.word	0x40021000
 8000194:	00003e7f 	.word	0x00003e7f
 8000198:	000003e7 	.word	0x000003e7

0800019c <GPIO_Configuration>:

void GPIO_Configuration(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
    // GPIOAクロックを有効化
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80001a0:	4b14      	ldr	r3, [pc, #80]	; (80001f4 <GPIO_Configuration+0x58>)
 80001a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001a4:	4b13      	ldr	r3, [pc, #76]	; (80001f4 <GPIO_Configuration+0x58>)
 80001a6:	2101      	movs	r1, #1
 80001a8:	430a      	orrs	r2, r1
 80001aa:	62da      	str	r2, [r3, #44]	; 0x2c

    // PA0をAlternate Functionモードに設定
    GPIOA->MODER &= ~(3U << (2 * 0));  // ビット0をクリア（リセット）
 80001ac:	23a0      	movs	r3, #160	; 0xa0
 80001ae:	05db      	lsls	r3, r3, #23
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	23a0      	movs	r3, #160	; 0xa0
 80001b4:	05db      	lsls	r3, r3, #23
 80001b6:	2103      	movs	r1, #3
 80001b8:	438a      	bics	r2, r1
 80001ba:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (2U << (2 * 0));   // PA0をAlternate Functionモードに設定
 80001bc:	23a0      	movs	r3, #160	; 0xa0
 80001be:	05db      	lsls	r3, r3, #23
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	23a0      	movs	r3, #160	; 0xa0
 80001c4:	05db      	lsls	r3, r3, #23
 80001c6:	2102      	movs	r1, #2
 80001c8:	430a      	orrs	r2, r1
 80001ca:	601a      	str	r2, [r3, #0]

    // PA0のAlternate FunctionをTIM2_CH1に設定
    GPIOA->AFR[0] &= ~(0xFU << (4 * 0));  // ビット0-3をクリア
 80001cc:	23a0      	movs	r3, #160	; 0xa0
 80001ce:	05db      	lsls	r3, r3, #23
 80001d0:	6a1a      	ldr	r2, [r3, #32]
 80001d2:	23a0      	movs	r3, #160	; 0xa0
 80001d4:	05db      	lsls	r3, r3, #23
 80001d6:	210f      	movs	r1, #15
 80001d8:	438a      	bics	r2, r1
 80001da:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[0] |= (2U << (4 * 0));     // PA0のAlternate FunctionをAF2 (TIM2_CH1) に設定
 80001dc:	23a0      	movs	r3, #160	; 0xa0
 80001de:	05db      	lsls	r3, r3, #23
 80001e0:	6a1a      	ldr	r2, [r3, #32]
 80001e2:	23a0      	movs	r3, #160	; 0xa0
 80001e4:	05db      	lsls	r3, r3, #23
 80001e6:	2102      	movs	r1, #2
 80001e8:	430a      	orrs	r2, r1
 80001ea:	621a      	str	r2, [r3, #32]
}
 80001ec:	46c0      	nop			; (mov r8, r8)
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	40021000 	.word	0x40021000

080001f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <NMI_Handler+0x4>

080001fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000202:	e7fe      	b.n	8000202 <HardFault_Handler+0x4>

08000204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000212:	46c0      	nop			; (mov r8, r8)
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800021c:	f000 f84a 	bl	80002b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000220:	46c0      	nop			; (mov r8, r8)
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000230:	4813      	ldr	r0, [pc, #76]	; (8000280 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	f7ff fff7 	bl	8000226 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000238:	4812      	ldr	r0, [pc, #72]	; (8000284 <LoopForever+0x6>)
    LDR R1, [R0]
 800023a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800023c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800023e:	4a12      	ldr	r2, [pc, #72]	; (8000288 <LoopForever+0xa>)
    CMP R1, R2
 8000240:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000242:	d105      	bne.n	8000250 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000244:	4811      	ldr	r0, [pc, #68]	; (800028c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000246:	4912      	ldr	r1, [pc, #72]	; (8000290 <LoopForever+0x12>)
    STR R1, [R0]
 8000248:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800024a:	4812      	ldr	r0, [pc, #72]	; (8000294 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800024c:	4912      	ldr	r1, [pc, #72]	; (8000298 <LoopForever+0x1a>)
    STR R1, [R0]
 800024e:	6001      	str	r1, [r0, #0]

08000250 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	4812      	ldr	r0, [pc, #72]	; (800029c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000252:	4913      	ldr	r1, [pc, #76]	; (80002a0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <LoopForever+0x26>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000268:	4c10      	ldr	r4, [pc, #64]	; (80002ac <LoopForever+0x2e>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000276:	f000 f82f 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800027a:	f7ff ff45 	bl	8000108 <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
   ldr   r0, =_estack
 8000280:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000284:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000288:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800028c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000290:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000294:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000298:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002a4:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002ac:	20000024 	.word	0x20000024

080002b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_IRQHandler>
	...

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x1c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	001a      	movs	r2, r3
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_IncTick+0x20>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	18d2      	adds	r2, r2, r3
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <HAL_IncTick+0x20>)
 80002c6:	601a      	str	r2, [r3, #0]
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000020 	.word	0x20000020

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2600      	movs	r6, #0
 80002dc:	4c0c      	ldr	r4, [pc, #48]	; (8000310 <__libc_init_array+0x38>)
 80002de:	4d0d      	ldr	r5, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	2600      	movs	r6, #0
 80002ea:	f000 f819 	bl	8000320 <_init>
 80002ee:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <__libc_init_array+0x40>)
 80002f0:	4d0a      	ldr	r5, [pc, #40]	; (800031c <__libc_init_array+0x44>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	00b3      	lsls	r3, r6, #2
 80002fe:	58eb      	ldr	r3, [r5, r3]
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	00b3      	lsls	r3, r6, #2
 8000308:	58eb      	ldr	r3, [r5, r3]
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	0800033c 	.word	0x0800033c
 800031c:	08000338 	.word	0x08000338

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
