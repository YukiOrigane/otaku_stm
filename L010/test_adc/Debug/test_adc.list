
test_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000318  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000318  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000320  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000324  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000324  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f57  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000055c  00000000  00000000  00020fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00021528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000145  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e73c  00000000  00000000  0002183d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002177  00000000  00000000  0002ff79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005945c  00000000  00000000  000320f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000050c  00000000  00000000  0008b54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0008ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000300 	.word	0x08000300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000300 	.word	0x08000300

08000108 <main>:
void GPIO_Configuration(void);

uint16_t ADC_ReadValue = 0;

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
    // STM32L0xxのクロック設定（デフォルトのHSIクロックを使用）

    // GPIOとADCの設定
    GPIO_Configuration();
 800010c:	f000 f844 	bl	8000198 <GPIO_Configuration>
    ADC_Configuration();
 8000110:	f000 f816 	bl	8000140 <ADC_Configuration>

    while (1)
    {
        // ADC変換の開始
        ADC1->CR |= ADC_CR_ADSTART;
 8000114:	4b08      	ldr	r3, [pc, #32]	; (8000138 <main+0x30>)
 8000116:	689a      	ldr	r2, [r3, #8]
 8000118:	4b07      	ldr	r3, [pc, #28]	; (8000138 <main+0x30>)
 800011a:	2104      	movs	r1, #4
 800011c:	430a      	orrs	r2, r1
 800011e:	609a      	str	r2, [r3, #8]

        // 変換が完了するまで待つ
        while (!(ADC1->ISR & ADC_ISR_EOC))
 8000120:	46c0      	nop			; (mov r8, r8)
 8000122:	4b05      	ldr	r3, [pc, #20]	; (8000138 <main+0x30>)
 8000124:	681b      	ldr	r3, [r3, #0]
 8000126:	2204      	movs	r2, #4
 8000128:	4013      	ands	r3, r2
 800012a:	d0fa      	beq.n	8000122 <main+0x1a>
        {
            // 何もしない
        }

        // ADCの値を読み取り
        ADC_ReadValue = ADC1->DR;
 800012c:	4b02      	ldr	r3, [pc, #8]	; (8000138 <main+0x30>)
 800012e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000130:	b29a      	uxth	r2, r3
 8000132:	4b02      	ldr	r3, [pc, #8]	; (800013c <main+0x34>)
 8000134:	801a      	strh	r2, [r3, #0]
        ADC1->CR |= ADC_CR_ADSTART;
 8000136:	e7ed      	b.n	8000114 <main+0xc>
 8000138:	40012400 	.word	0x40012400
 800013c:	20000020 	.word	0x20000020

08000140 <ADC_Configuration>:
    }
}

void ADC_Configuration(void)
{
 8000140:	b580      	push	{r7, lr}
 8000142:	af00      	add	r7, sp, #0
    // ADC1のクロックを有効化
    RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 8000144:	4b12      	ldr	r3, [pc, #72]	; (8000190 <ADC_Configuration+0x50>)
 8000146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000148:	4b11      	ldr	r3, [pc, #68]	; (8000190 <ADC_Configuration+0x50>)
 800014a:	2180      	movs	r1, #128	; 0x80
 800014c:	0089      	lsls	r1, r1, #2
 800014e:	430a      	orrs	r2, r1
 8000150:	635a      	str	r2, [r3, #52]	; 0x34

    // ADCのキャリブレーションを有効化
    ADC1->CR = ADC_CR_ADCAL;
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <ADC_Configuration+0x54>)
 8000154:	2280      	movs	r2, #128	; 0x80
 8000156:	0612      	lsls	r2, r2, #24
 8000158:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & ADC_CR_ADCAL)
 800015a:	46c0      	nop			; (mov r8, r8)
 800015c:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <ADC_Configuration+0x54>)
 800015e:	689b      	ldr	r3, [r3, #8]
 8000160:	2b00      	cmp	r3, #0
 8000162:	dbfb      	blt.n	800015c <ADC_Configuration+0x1c>
    {
        // キャリブレーションが完了するまで待つ
    }

    // ADCを設定
    ADC1->CFGR1 |= ADC_CFGR1_RES_1; // 8ビットの分解能を設定
 8000164:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <ADC_Configuration+0x54>)
 8000166:	68da      	ldr	r2, [r3, #12]
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <ADC_Configuration+0x54>)
 800016a:	2110      	movs	r1, #16
 800016c:	430a      	orrs	r2, r1
 800016e:	60da      	str	r2, [r3, #12]
    ADC1->CHSELR |= ADC_CHSELR_CHSEL5; // PA5をADCの入力チャンネルとして選択
 8000170:	4b08      	ldr	r3, [pc, #32]	; (8000194 <ADC_Configuration+0x54>)
 8000172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <ADC_Configuration+0x54>)
 8000176:	2120      	movs	r1, #32
 8000178:	430a      	orrs	r2, r1
 800017a:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CR |= ADC_CR_ADEN; // ADCを有効化
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <ADC_Configuration+0x54>)
 800017e:	689a      	ldr	r2, [r3, #8]
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <ADC_Configuration+0x54>)
 8000182:	2101      	movs	r1, #1
 8000184:	430a      	orrs	r2, r1
 8000186:	609a      	str	r2, [r3, #8]
}
 8000188:	46c0      	nop			; (mov r8, r8)
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	40021000 	.word	0x40021000
 8000194:	40012400 	.word	0x40012400

08000198 <GPIO_Configuration>:

void GPIO_Configuration(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
    // GPIOAクロックを有効化
    RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800019c:	4b0c      	ldr	r3, [pc, #48]	; (80001d0 <GPIO_Configuration+0x38>)
 800019e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <GPIO_Configuration+0x38>)
 80001a2:	2101      	movs	r1, #1
 80001a4:	430a      	orrs	r2, r1
 80001a6:	62da      	str	r2, [r3, #44]	; 0x2c

    // PA5をアナログモードに設定
    GPIOA->MODER |= GPIO_MODER_MODE5;
 80001a8:	23a0      	movs	r3, #160	; 0xa0
 80001aa:	05db      	lsls	r3, r3, #23
 80001ac:	681a      	ldr	r2, [r3, #0]
 80001ae:	23a0      	movs	r3, #160	; 0xa0
 80001b0:	05db      	lsls	r3, r3, #23
 80001b2:	21c0      	movs	r1, #192	; 0xc0
 80001b4:	0109      	lsls	r1, r1, #4
 80001b6:	430a      	orrs	r2, r1
 80001b8:	601a      	str	r2, [r3, #0]

    // PA5のプルダウンを無効化
    GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD5;
 80001ba:	23a0      	movs	r3, #160	; 0xa0
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	68da      	ldr	r2, [r3, #12]
 80001c0:	23a0      	movs	r3, #160	; 0xa0
 80001c2:	05db      	lsls	r3, r3, #23
 80001c4:	4903      	ldr	r1, [pc, #12]	; (80001d4 <GPIO_Configuration+0x3c>)
 80001c6:	400a      	ands	r2, r1
 80001c8:	60da      	str	r2, [r3, #12]
}
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	40021000 	.word	0x40021000
 80001d4:	fffff3ff 	.word	0xfffff3ff

080001d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <NMI_Handler+0x4>

080001de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001e2:	e7fe      	b.n	80001e2 <HardFault_Handler+0x4>

080001e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80001e8:	46c0      	nop			; (mov r8, r8)
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001fc:	f000 f84a 	bl	8000294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000200:	46c0      	nop			; (mov r8, r8)
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000206:	b580      	push	{r7, lr}
 8000208:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800020a:	46c0      	nop			; (mov r8, r8)
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000210:	4813      	ldr	r0, [pc, #76]	; (8000260 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000214:	f7ff fff7 	bl	8000206 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <LoopForever+0x6>)
    LDR R1, [R0]
 800021a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800021c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <LoopForever+0xa>)
    CMP R1, R2
 8000220:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000222:	d105      	bne.n	8000230 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000226:	4912      	ldr	r1, [pc, #72]	; (8000270 <LoopForever+0x12>)
    STR R1, [R0]
 8000228:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800022a:	4812      	ldr	r0, [pc, #72]	; (8000274 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800022c:	4912      	ldr	r1, [pc, #72]	; (8000278 <LoopForever+0x1a>)
    STR R1, [R0]
 800022e:	6001      	str	r1, [r0, #0]

08000230 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000230:	4812      	ldr	r0, [pc, #72]	; (800027c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000232:	4913      	ldr	r1, [pc, #76]	; (8000280 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000234:	4a13      	ldr	r2, [pc, #76]	; (8000284 <LoopForever+0x26>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000238:	e002      	b.n	8000240 <LoopCopyDataInit>

0800023a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800023c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023e:	3304      	adds	r3, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000244:	d3f9      	bcc.n	800023a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000246:	4a10      	ldr	r2, [pc, #64]	; (8000288 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000248:	4c10      	ldr	r4, [pc, #64]	; (800028c <LoopForever+0x2e>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800024c:	e001      	b.n	8000252 <LoopFillZerobss>

0800024e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000250:	3204      	adds	r2, #4

08000252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000254:	d3fb      	bcc.n	800024e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000256:	f000 f82f 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800025a:	f7ff ff55 	bl	8000108 <main>

0800025e <LoopForever>:

LoopForever:
    b LoopForever
 800025e:	e7fe      	b.n	800025e <LoopForever>
   ldr   r0, =_estack
 8000260:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000264:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000268:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 800026c:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000270:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000274:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000278:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000284:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 8000288:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800028c:	20000028 	.word	0x20000028

08000290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_IRQHandler>
	...

08000294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <HAL_IncTick+0x1c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	001a      	movs	r2, r3
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <HAL_IncTick+0x20>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	18d2      	adds	r2, r2, r3
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <HAL_IncTick+0x20>)
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000024 	.word	0x20000024

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	2600      	movs	r6, #0
 80002bc:	4c0c      	ldr	r4, [pc, #48]	; (80002f0 <__libc_init_array+0x38>)
 80002be:	4d0d      	ldr	r5, [pc, #52]	; (80002f4 <__libc_init_array+0x3c>)
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	10a4      	asrs	r4, r4, #2
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	2600      	movs	r6, #0
 80002ca:	f000 f819 	bl	8000300 <_init>
 80002ce:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x40>)
 80002d0:	4d0a      	ldr	r5, [pc, #40]	; (80002fc <__libc_init_array+0x44>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	00b3      	lsls	r3, r6, #2
 80002de:	58eb      	ldr	r3, [r5, r3]
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	00b3      	lsls	r3, r6, #2
 80002e8:	58eb      	ldr	r3, [r5, r3]
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	08000318 	.word	0x08000318

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
